<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cijliu</title>
    <link>https://linweiliu.github.io/post/</link>
    <description>Recent content in Posts on cijliu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you likes to quote or reproduce.</copyright>
    <lastBuildDate>Wed, 28 Feb 2018 15:17:07 +0800</lastBuildDate>
    
	<atom:link href="https://linweiliu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang程序结构</title>
      <link>https://linweiliu.github.io/post/golang/golang_2/</link>
      <pubDate>Wed, 28 Feb 2018 15:17:07 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/golang/golang_2/</guid>
      <description>程序示例详解 /* FileName: helloworld.go * Author: cijliu */ /* 打包，这里main包是一个特殊包，定义了一个独立可执行的程序，而不是一个库或模块 */ package main /* 导入包， 这里导入fmt包，这是个Golang官方提供的输入输出包 */ import ( &amp;#34;fmt&amp;#34; ) /* 声明变量，Golang声明变量的结构方式： * var 变量名 变量类型 = 变量值 * 这里把声明统一放在一个地方。 */ var ( StringHelloWorld string = &amp;#34;Hello World!&amp;#34; i int = 0 //未使用 ) /* main函数作为程序执行的入口函数 */ func main(){ /* 打印一行，fmt是包名，Println是fmt包内函数 */ fmt.Println(StringHelloWorld) } 整个Golang程序的结构大致如此，进行编译，这里可以先运行试试看结果，在cmd下执行
 go run helloworld.go
 输出结果
 Hello World!
 若想编译生成二进制可执行文件，在cmd下执行
 go build helloworld.</description>
    </item>
    
    <item>
      <title>NAT类型搭建指南</title>
      <link>https://linweiliu.github.io/post/nat_type_build_guide/</link>
      <pubDate>Tue, 13 Feb 2018 12:09:05 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/nat_type_build_guide/</guid>
      <description>NAT类型搭建指南  1990年代中期，NAT是作为一种解决IPv4地址短缺以避免保留IP地址困难的方案而流行起来的，由于互联网的普及，NAT就成了家庭和小型办公室网络连接上的路由器的一个标准特征，因为对他们来说，申请独立的IP地址的代价要高于所带来的效益，但是，NAT也让主机之间的通信变得复杂，导致了通信效率的降低，为了提高通信效率，需要对NAT进行内网穿透实现P2P通信，在此之前，需要搭建一套完整的NAT环境，本文目的就是为了完成该任务而撰写。
 预备知识 为了搭建一套完整NAT环境，你需要知道的：
 NAT类型 Linux网络数据包管理指令iptables RFC 3489 STUN相关标准协议  下面将对上述知识进行简要教学，如果已经熟知请跳过。
NAT类型 根据UDP传输过程中，NAT处理的差别，将NAT分为四种类型：
 全锥型(Full Cone)  只要外部主机获取到全锥型NAT主机的外网IP和Port就能够与处于NAT后的内网主机进行网络通信。
 限制锥型(Restricted Cone)  外部主机获取到该类型主机的IP和Port信息，还需要该类型主机主动向外部主机发送网络包并在超时时间内，外部主机才有权限根据IP和Port信息使用任意端口Port与其建立连接。
 端口限制锥型(Port Restricted Cone) 在限制锥型的条件下，外部主机只能用该类型主机主动发过请求的端口号Port来与其建立连接。
 对称型(Symmetric)
  两个外部主机获取到该类型主机的端口号Port不一样，第三个外部主机无法根据前面两个外部主机获取的IP和Port信息与其建立连接，并且每次该类型主机向外发起一次连接使用的IP和Port将会随机分配。
如果想了解更像详细的信息，请参见RFC 3489
Linux网络数据包管理指令iptables Linux使用iptables来管理网络数据包的流向，iptables是以tables、chains和rules来控制网络包的流向，具体流向关系图：
iptables就是根据该关系对数据包进行派送和转发，其中nat表就是NAT服务器的规则表格。这里仅仅介绍iptables的机制流程，具体操作和使用教学参见 鸟哥的Linux私房菜 Linux防火墙与NAT服务器
RFC 3489 STUN相关标准协议 STUN是一个协助NAT穿透的服务器，根据RFC 3489协议描述的穿透方案进行设计，主要进行如下几层判断：
 TEST1: Client发送UDP包到Server1，要求Server1返回Client的IP和Port信息，Client对比本地和Server1返回包的信息，信息一致则无NAT服务进入防火墙判断，否则存在NAT服务进入NAT类型判断 TEST2: Client发送UDP包到Server1，要求Server1使用Server2把IP和Port信息返回，Client接收到则该NAT为Full Cone NAT, 否则进入TEST1测试，如果IP和Port信息与之前TEST1不一致则为Symmetric NAT TEST3: Client发送UDP包到Server1，要求Server1使用另外的端口Port把IP和Port信息返回，Client收到则该NAT为Restricted Cone NAT， 否则为Port Restricted Cone NAT  NAT服务器搭建  在对NAT相关知识有了一定了解后，在Linux下搭建一套完整的NAT服务成为了可能，这里我们使用iptables来进行搭建。</description>
    </item>
    
    <item>
      <title>Go 起源</title>
      <link>https://linweiliu.github.io/post/golang/golang_1/</link>
      <pubDate>Sat, 03 Feb 2018 09:45:40 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/golang/golang_1/</guid>
      <description>21世纪的C语言 编程语言的发展如同生物进化，我们不断地吸取前者的优秀设计哲学思想，然后创造出一门新的开发语言，随着项目规模和涉及的领域不断延伸，不同的编程语言朝着各自擅长的领域进行演化，最终又是取各家之所长，又衍生出一门新的编程语言。或许某天语言都具有自我进化的特性，那现在的所有语言都将成为历史，不管他们现在被称作什么语言，最终都将成为历史，程序员再也不用再为什么语言最好而内斗起争执。
好吧，扯远了，来说说Go语言，对于使用C语言长达十年时间的本人来说，嗯，为什么不用C++？原因很简单，一千个C++程序员眼里就有一千种C++代码，而C语言却是Only one。如果没有约定俗成的使用GNU等一些开源项目的代码指南去写项目代码，那对后续代码的接管者来说简直就是噩梦！再回到Go语言本身来说，从1960年到现在整个编程语言的演变，Go语言可以说是目前取各家之所长，并拥有高贵血统的新一代开发语言，最最最重要的一点是他是开源的，只要你有肯研究，你可以知道所有的实现细节，对我来说真的有种说不出来的快感，阅读代码有时候就像在看一本有思维的书，好的坏的都将成为你的经验。
而Go语言从C语言基础上进行设计，加上目前编程语言的各种优秀设计思想，更是支持嵌入式交叉编译，太多优点让人没有理由不是学习。这篇算是我的Go语言学习之路的开篇吐槽，接下来就是我的Go语言学习计划。</description>
    </item>
    
    <item>
      <title>Golang语言</title>
      <link>https://linweiliu.github.io/post/golang/golang_0/</link>
      <pubDate>Tue, 30 Jan 2018 09:06:40 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/golang/golang_0/</guid>
      <description> 序  每年一门新语言，今年准备开始学习Golang语言，这是Google使用的内部开发语言，目前已经开源出来，大体浏览了一遍语言特性，一下子就被这门语言给吸引了，对于使用C/C++长达十一年的自己来说，这门语言给我有如同被针扎了十多年，终于能够把针取出来的愉悦感，再详细地了解这门开源语言的现状后，不管从最基础的编译器还是开源项目维护管理，甚至是社区氛围，我想我应该学习他。
 目标 1.熟悉语法特性
2.基于WEB方向进行深入学习
计划周期  启动时间：2月1日
 时间安排：一周5小时 文档输出时间：一周一稿
  </description>
    </item>
    
    <item>
      <title>博客计划</title>
      <link>https://linweiliu.github.io/post/readme/</link>
      <pubDate>Sun, 21 Jan 2018 15:42:37 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/readme/</guid>
      <description> 为什么写作  知识归档 思维整理 兴趣使然  确认目标  每个月更新至少1篇文章； 内容不限，但主要是专业性文章； 博客新功能的开发(低优先级)；  </description>
    </item>
    
  </channel>
</rss>