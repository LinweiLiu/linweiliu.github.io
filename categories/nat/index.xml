<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nat on cijliu</title>
    <link>https://linweiliu.github.io/categories/nat/</link>
    <description>Recent content in Nat on cijliu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you likes to quote or reproduce.</copyright>
    <lastBuildDate>Tue, 13 Feb 2018 12:09:05 +0800</lastBuildDate>
    
	<atom:link href="https://linweiliu.github.io/categories/nat/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NAT类型搭建指南</title>
      <link>https://linweiliu.github.io/post/nat_type_build_guide/</link>
      <pubDate>Tue, 13 Feb 2018 12:09:05 +0800</pubDate>
      
      <guid>https://linweiliu.github.io/post/nat_type_build_guide/</guid>
      <description>NAT类型搭建指南  1990年代中期，NAT是作为一种解决IPv4地址短缺以避免保留IP地址困难的方案而流行起来的，由于互联网的普及，NAT就成了家庭和小型办公室网络连接上的路由器的一个标准特征，因为对他们来说，申请独立的IP地址的代价要高于所带来的效益，但是，NAT也让主机之间的通信变得复杂，导致了通信效率的降低，为了提高通信效率，需要对NAT进行内网穿透实现P2P通信，在此之前，需要搭建一套完整的NAT环境，本文目的就是为了完成该任务而撰写。
 预备知识 为了搭建一套完整NAT环境，你需要知道的：
 NAT类型 Linux网络数据包管理指令iptables RFC 3489 STUN相关标准协议  下面将对上述知识进行简要教学，如果已经熟知请跳过。
NAT类型 根据UDP传输过程中，NAT处理的差别，将NAT分为四种类型：
 全锥型(Full Cone)  只要外部主机获取到全锥型NAT主机的外网IP和Port就能够与处于NAT后的内网主机进行网络通信。
 限制锥型(Restricted Cone)  外部主机获取到该类型主机的IP和Port信息，还需要该类型主机主动向外部主机发送网络包并在超时时间内，外部主机才有权限根据IP和Port信息使用任意端口Port与其建立连接。
 端口限制锥型(Port Restricted Cone) 在限制锥型的条件下，外部主机只能用该类型主机主动发过请求的端口号Port来与其建立连接。
 对称型(Symmetric)
  两个外部主机获取到该类型主机的端口号Port不一样，第三个外部主机无法根据前面两个外部主机获取的IP和Port信息与其建立连接，并且每次该类型主机向外发起一次连接使用的IP和Port将会随机分配。
如果想了解更像详细的信息，请参见RFC 3489
Linux网络数据包管理指令iptables Linux使用iptables来管理网络数据包的流向，iptables是以tables、chains和rules来控制网络包的流向，具体流向关系图：
iptables就是根据该关系对数据包进行派送和转发，其中nat表就是NAT服务器的规则表格。这里仅仅介绍iptables的机制流程，具体操作和使用教学参见 鸟哥的Linux私房菜 Linux防火墙与NAT服务器
RFC 3489 STUN相关标准协议 STUN是一个协助NAT穿透的服务器，根据RFC 3489协议描述的穿透方案进行设计，主要进行如下几层判断：
 TEST1: Client发送UDP包到Server1，要求Server1返回Client的IP和Port信息，Client对比本地和Server1返回包的信息，信息一致则无NAT服务进入防火墙判断，否则存在NAT服务进入NAT类型判断 TEST2: Client发送UDP包到Server1，要求Server1使用Server2把IP和Port信息返回，Client接收到则该NAT为Full Cone NAT, 否则进入TEST1测试，如果IP和Port信息与之前TEST1不一致则为Symmetric NAT TEST3: Client发送UDP包到Server1，要求Server1使用另外的端口Port把IP和Port信息返回，Client收到则该NAT为Restricted Cone NAT， 否则为Port Restricted Cone NAT  NAT服务器搭建  在对NAT相关知识有了一定了解后，在Linux下搭建一套完整的NAT服务成为了可能，这里我们使用iptables来进行搭建。</description>
    </item>
    
  </channel>
</rss>